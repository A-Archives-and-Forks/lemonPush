name: Build Three Platforms

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.5.3)'
        required: true
        default: '1.0.5.3'

env:
  APP_NAME: 柠檬Push
  ENGLISH_NAME: lemon_push_gui

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: 'desktop_gui/frontend/yarn.lock'
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      
    - name: Set version from tag or input
      run: |
        if ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}" -replace "v", ""
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "Building version: $version"
      shell: powershell
      
    - name: Update version in wails.json
      run: |
        cd desktop_gui
        (Get-Content wails.json) -replace '"productVersion": "[^"]*"', "`"productVersion`": `"$env:VERSION`"" | Set-Content wails.json
        echo "Updated version in wails.json to $env:VERSION"
      shell: powershell
      
    - name: Install frontend dependencies
      run: cd desktop_gui/frontend && yarn install
      
    - name: Build frontend
      run: cd desktop_gui/frontend && yarn build
      
    - name: Build Windows application
      run: cd desktop_gui && wails build -platform windows/amd64 -clean
      
    - name: Prepare artifacts
      run: |
        mkdir release
        copy "desktop_gui\build\bin\${{ env.APP_NAME }}.exe" "release\${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_windows_amd64.exe"
        if (Test-Path "desktop_gui\build\bin\*.dll") {
          copy "desktop_gui\build\bin\*.dll" "release\"
        }
      shell: powershell
      
    - name: Create ZIP archive
      run: |
        cd release
        powershell -command "Compress-Archive -Path '*' -DestinationPath '${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_windows_amd64.zip' -Force"
      shell: powershell
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-amd64
        path: release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_windows_amd64.zip

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: 'desktop_gui/frontend/yarn.lock'
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      
    - name: Set version from tag or input
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building version: $VERSION"
      shell: bash
      
    - name: Update version in wails.json
      run: |
        cd desktop_gui
        sed -i '' 's/"productVersion": "[^"]*"/"productVersion": "'$VERSION'"/' wails.json
        echo "Updated version in wails.json to $VERSION"
      shell: bash
      
    - name: Install frontend dependencies
      run: cd desktop_gui/frontend && yarn install
      
    - name: Build frontend
      run: cd desktop_gui/frontend && yarn build
      
    - name: Build macOS application
      run: cd desktop_gui && wails build -platform darwin/universal -clean
      
    - name: Prepare artifacts
      run: |
        mkdir -p release
        cp "desktop_gui/build/bin/${{ env.APP_NAME }}" "release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal"
        cp -r "desktop_gui/build/bin/${{ env.APP_NAME }}.app" "release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal.app" 2>/dev/null || true
        tar -czf "release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal.tar.gz" -C "release" "${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal" "${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal.app" 2>/dev/null || tar -czf "release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal.tar.gz" -C "release" "${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_universal"
      shell: bash
      
    - name: Create ZIP archive
      run: |
        cd release
        zip -r "${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_arm64.zip" *
      shell: bash
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: darwin-arm64
        path: release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_darwin_arm64.zip

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: 'desktop_gui/frontend/yarn.lock'
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      
    - name: Install libgtk-3-dev (for Linux UI)
      run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
      
    - name: Set version from tag or input
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building version: $VERSION"
      shell: bash
      
    - name: Update version in wails.json
      run: |
        cd desktop_gui
        sed -i 's/"productVersion": "[^"]*"/"productVersion": "'$VERSION'"/' wails.json
        echo "Updated version in wails.json to $VERSION"
      shell: bash
      
    - name: Install frontend dependencies
      run: cd desktop_gui/frontend && yarn install
      
    - name: Build frontend
      run: cd desktop_gui/frontend && yarn build
      
    - name: Build Linux application
      run: cd desktop_gui && wails build -platform linux/amd64 -clean
      
    - name: Prepare artifacts
      run: |
        mkdir -p release
        cp "desktop_gui/build/bin/${{ env.APP_NAME }}" "release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_linux_amd64"
      shell: bash
      
    - name: Create ZIP archive
      run: |
        cd release
        zip -r "${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_linux_amd64.zip" *
      shell: bash
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64
        path: release/${{ env.ENGLISH_NAME }}_v${{ env.VERSION }}_linux_amd64.zip

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Set version from tag
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Releasing version: $VERSION"
      shell: bash
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.APP_NAME }} v${{ env.VERSION }}
        body: |
          ## ${{ env.APP_NAME }} v${{ env.VERSION }}
          
          ### 下载链接:
          - Windows (amd64): lemon_push_gui_v${{ env.VERSION }}_windows_amd64.zip
          - macOS (arm64): lemon_push_gui_v${{ env.VERSION }}_darwin_arm64.zip
          - Linux (amd64): lemon_push_gui_v${{ env.VERSION }}_linux_amd64.zip
          
          ### 安装说明:
          #### Windows:
          1. 下载并解压 lemon_push_gui_v${{ env.VERSION }}_windows_amd64.zip
          2. 运行 lemon_push_gui_v${{ env.VERSION }}_windows_amd64.exe
          
          #### macOS:
          1. 下载并解压 lemon_push_gui_v${{ env.VERSION }}_darwin_arm64.zip
          2. 将 lemon_push_gui_v${{ env.VERSION }}_darwin_arm64 移动到应用程序文件夹
          
          #### Linux:
          1. 下载并解压 lemon_push_gui_v${{ env.VERSION }}_linux_amd64.zip
          2. 运行 lemon_push_gui_v${{ env.VERSION }}_linux_amd64
        files: |
          artifacts/windows-amd64/lemon_push_gui_v${{ env.VERSION }}_windows_amd64.zip
          artifacts/darwin-arm64/lemon_push_gui_v${{ env.VERSION }}_darwin_arm64.zip
          artifacts/linux-amd64/lemon_push_gui_v${{ env.VERSION }}_linux_amd64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}