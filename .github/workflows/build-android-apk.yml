name: Build Android APK

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.5.3)'
        required: false
        default: ''
      release:
        description: 'Create a GitHub Release after build'
        required: false
        default: 'false'
        type: boolean
      sign_apk:
        description: 'Sign the APK with release key'
        required: false
        default: 'true'
        type: boolean

env:
  APP_NAME: 柠檬Push
  ENGLISH_NAME: lemon_push
  PACKAGE_NAME: net.lemontree.push

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Set version from tag or input
      id: version
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_tag=true" >> $GITHUB_OUTPUT
        elif [[ -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_tag=false" >> $GITHUB_OUTPUT
        else
          # Get version from app/build.gradle
          VERSION=$(grep "versionName" android/app/build.gradle | sed 's/.*"\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_tag=false" >> $GITHUB_OUTPUT
        fi
        echo "Building version: $VERSION"
      shell: bash
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x android/gradlew
      shell: bash
      
    - name: Update version in build.gradle (if needed)
      if: steps.version.outputs.is_tag == 'true' || github.event.inputs.version != ''
      run: |
        cd android
        # Update versionName and versionCode in app/build.gradle
        VERSION="${{ steps.version.outputs.version }}"
        
        # Extract version components (assuming format like 1.0.5.3)
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        
        # Set default values if parts are missing
        MAJOR=${VERSION_PARTS[0]:-1}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        BUILD=${VERSION_PARTS[3]:-0}
        
        # Calculate versionCode (e.g., 10503 for 1.0.5.3)
        VERSION_CODE=$((MAJOR * 1000000 + MINOR * 10000 + PATCH * 100 + BUILD))
        
        # Update build.gradle
        sed -i "s/versionCode .*/versionCode $VERSION_CODE/" app/build.gradle
        sed -i "s/versionName .*/versionName \"$VERSION\"/" app/build.gradle
        
        echo "Updated versionCode to $VERSION_CODE and versionName to $VERSION"
      shell: bash
      
    - name: Setup signing configuration
      if: github.event.inputs.sign_apk == 'true' || github.event.inputs.sign_apk == ''
      run: |
        cd android
        
        # Backup original build.gradle
        cp app/build.gradle app/build.gradle.backup
        
        # Create signing configuration script
        cat > add_signing.py << 'EOF'
import re

# Read the original build.gradle
with open('app/build.gradle.backup', 'r') as f:
    content = f.read()

# Add signing configuration before buildTypes
signing_config = """    // Signing configuration added by GitHub Actions
    if (project.hasProperty('RELEASE_STORE_FILE')) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

"""

# Insert signing config before buildTypes
content = content.replace('    buildTypes {', signing_config + '    buildTypes {')

# Update release build type to use signing config
old_release = """        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }"""

new_release = """        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            }
        }"""

content = content.replace(old_release, new_release)

# Write updated content
with open('app/build.gradle', 'w') as f:
    f.write(content)

print('Added signing configuration to build.gradle')
EOF
        
        # Run the script
        python3 add_signing.py
        
        # Clean up
        rm add_signing.py
      shell: bash
      
    - name: Build Debug APK
      run: |
        cd android
        ./gradlew assembleDebug
      shell: bash
      
    - name: Build Release APK
      run: |
        cd android
        # If signing is enabled and secrets are available, use them
        if [[ "${{ github.event.inputs.sign_apk }}" == "true" || "${{ github.event.inputs.sign_apk }}" == "" ]]; then
          if [[ -n "${{ secrets.RELEASE_STORE_FILE }}" ]]; then
            echo "Building signed release APK..."
            echo "${{ secrets.RELEASE_STORE_FILE }}" | base64 -d > app/keystore.jks
            ./gradlew assembleRelease -PRELEASE_STORE_FILE=app/keystore.jks \
              -PRELEASE_STORE_PASSWORD="${{ secrets.RELEASE_STORE_PASSWORD }}" \
              -PRELEASE_KEY_ALIAS="${{ secrets.RELEASE_KEY_ALIAS }}" \
              -PRELEASE_KEY_PASSWORD="${{ secrets.RELEASE_KEY_PASSWORD }}"
          else
            echo "Warning: No signing secrets found, building unsigned release APK..."
            ./gradlew assembleRelease
          fi
        else
          echo "Building unsigned release APK..."
          ./gradlew assembleRelease
        fi
        
        # Verify the APK was created with the expected name
        VERSION="${{ steps.version.outputs.version }}"
        EXPECTED_APK="app/build/outputs/apk/release/lemon_push_v${VERSION}.apk"
        if [ -f "$EXPECTED_APK" ]; then
          echo "Release APK created successfully: $EXPECTED_APK"
        else
          echo "Error: Expected release APK not found at $EXPECTED_APK"
          echo "Listing release directory contents:"
          ls -la app/build/outputs/apk/release/
          exit 1
        fi
      shell: bash
      
    - name: Prepare APK artifacts
      run: |
        mkdir -p release
        # Copy debug APK (debug builds use the default name)
        cp android/app/build/outputs/apk/debug/app-debug.apk "release/${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_debug.apk"
        # Copy release APK (release builds are renamed by applicationVariants.all)
        cp android/app/build/outputs/apk/release/lemon_push_v${{ steps.version.outputs.version }}.apk "release/${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_release.apk"
        
        # Create checksums
        cd release
        sha256sum *.apk > checksums.txt
        
        echo "APK artifacts prepared:"
        ls -la
      shell: bash
      
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: android-debug-apk
        path: release/${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_debug.apk
        retention-days: 30
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: android-release-apk
        path: release/${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_release.apk
        retention-days: 90
        
    - name: Upload Checksums
      uses: actions/upload-artifact@v4
      with:
        name: android-checksums
        path: release/checksums.txt
        retention-days: 90

  create-release:
    needs: build-android
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') || github.event.inputs.release == 'true') && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set version from tag or input
      id: version
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ -n "${{ github.event.inputs.version }}" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Get version from app/build.gradle
          VERSION=$(grep "versionName" android/app/build.gradle | sed 's/.*"\(.*\)".*/\1/')
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"
      shell: bash
      
    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: android-release-apk
        path: artifacts
        
    - name: Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: android-debug-apk
        path: artifacts
        
    - name: Download Checksums
      uses: actions/download-artifact@v4
      with:
        name: android-checksums
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.APP_NAME }} Android v${{ steps.version.outputs.version }}
        body: |
          ## ${{ env.APP_NAME }} Android v${{ steps.version.outputs.version }}
          
          ### 下载链接:
          - Android Release APK: ${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_release.apk
          - Android Debug APK: ${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_debug.apk
          - 校验和文件: checksums.txt
          
          ### 安装说明:
          #### Android:
          1. 下载 ${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_release.apk
          2. 在 Android 设备上启用"未知来源"安装
          3. 点击 APK 文件进行安装
          
          ### 功能说明:
          - 剪贴板同步功能
          - 文本分词处理
          - 自动操作模式
          - 网络扫描和连接
          
          ### 系统要求:
          - Android 5.0 (API Level 21) 或更高版本
          - 建议在 Android 7.0 或更高版本上运行以获得最佳体验
          
          ### 更新日志:
          请查看项目提交记录了解详细更新内容。
        files: |
          artifacts/${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_release.apk
          artifacts/${{ env.ENGLISH_NAME }}_v${{ steps.version.outputs.version }}_debug.apk
          artifacts/checksums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}